<footer class="bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 mt-12">
    <div class="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="text-center">
            <p class="text-gray-600 dark:text-gray-400 mb-2"><%= theme.footer %></p>
            <% if (theme.beian) { %>
            <p class="text-gray-500 dark:text-gray-500 text-sm"><%- theme.beian %></p>
            <% } %>
            </div>
        </div>
 </footer>

<!-- 回到顶部按钮 -->
<button id="back-to-top" class="fixed bottom-8 right-8 bg-primary-600 hover:bg-primary-700 text-white p-3 rounded-full shadow-lg transition-all duration-300 opacity-0 invisible z-50">
    <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M3.293 9.707a1 1 0 010-1.414l6-6a1 1 0 011.414 0l6 6a1 1 0 01-1.414 1.414L11 5.414V17a1 1 0 11-2 0V5.414L4.707 9.707a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
    </svg>
</button>

<!-- JavaScript -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    // 深色模式切换
    const themeToggle = document.getElementById('theme-toggle');
    const darkIcon = document.getElementById('theme-toggle-dark-icon');
    const lightIcon = document.getElementById('theme-toggle-light-icon');
    
    // 初始化图标显示
    function updateThemeIcons() {
        if (document.documentElement.classList.contains('dark')) {
            darkIcon.classList.add('hidden');
            lightIcon.classList.remove('hidden');
        } else {
            darkIcon.classList.remove('hidden');
            lightIcon.classList.add('hidden');
        }
    }
    
    updateThemeIcons();
    
    if (themeToggle) {
        themeToggle.addEventListener('click', function() {
            if (document.documentElement.classList.contains('dark')) {
                document.documentElement.classList.remove('dark');
                localStorage.theme = 'light';
            } else {
                document.documentElement.classList.add('dark');
                localStorage.theme = 'dark';
            }
            updateThemeIcons();
        });
    }
    
    // 移动端菜单切换
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    
    if (mobileMenuButton && mobileMenu) {
        mobileMenuButton.addEventListener('click', function() {
            mobileMenu.classList.toggle('hidden');
        });
    }
    
    // 回到顶部按钮
    const backToTopButton = document.getElementById('back-to-top');
    
    if (backToTopButton) {
        window.addEventListener('scroll', function() {
            if (window.pageYOffset > 300) {
                backToTopButton.classList.remove('opacity-0', 'invisible');
                backToTopButton.classList.add('opacity-100', 'visible');
            } else {
                backToTopButton.classList.add('opacity-0', 'invisible');
                backToTopButton.classList.remove('opacity-100', 'visible');
            }
        });
        
        backToTopButton.addEventListener('click', function() {
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        });
    }
});
</script>

<!-- Mermaid 支持 -->
<% if (config.mermaid && config.mermaid.enable) { %>
<script src="<%- url_for('js/mermaid.min.js') %>"></script>
<script>
window.addEventListener('load', function() {
    // 初始化 Mermaid 并让其自动渲染
    mermaid.initialize({
        theme: '<%= config.mermaid.options.theme || "default" %>',
        startOnLoad: true, // 启用自动渲染
        securityLevel: '<%= config.mermaid.options.securityLevel || "loose" %>',
        
        // 为各个图表类型配置自适应宽度
        flowchart: {
            htmlLabels: '<%= config.mermaid.options.flowchart && config.mermaid.options.flowchart.htmlLabels !== undefined ? config.mermaid.options.flowchart.htmlLabels : true %>',
            curve: '<%= config.mermaid.options.flowchart && config.mermaid.options.flowchart.curve || "linear" %>',
            useMaxWidth: true
        },
        sequence: {
            diagramMarginX: '<%= config.mermaid.options.sequence && config.mermaid.options.sequence.diagramMarginX || 50 %>',
            diagramMarginY: '<%= config.mermaid.options.sequence && config.mermaid.options.sequence.diagramMarginY || 10 %>',
            actorMargin: '<%= config.mermaid.options.sequence && config.mermaid.options.sequence.actorMargin || 50 %>',
            width: '<%= config.mermaid.options.sequence && config.mermaid.options.sequence.width || 150 %>',
            height: '<%= config.mermaid.options.sequence && config.mermaid.options.sequence.height || 65 %>',
            boxMargin: '<%= config.mermaid.options.sequence && config.mermaid.options.sequence.boxMargin || 10 %>',
            boxTextMargin: '<%= config.mermaid.options.sequence && config.mermaid.options.sequence.boxTextMargin || 5 %>',
            noteMargin: '<%= config.mermaid.options.sequence && config.mermaid.options.sequence.noteMargin || 10 %>',
            messageMargin: '<%= config.mermaid.options.sequence && config.mermaid.options.sequence.messageMargin || 35 %>',
            mirrorActors: '<%= config.mermaid.options.sequence && config.mermaid.options.sequence.mirrorActors !== undefined ? config.mermaid.options.sequence.mirrorActors : true %>',
            bottomMarginAdj: '<%= config.mermaid.options.sequence && config.mermaid.options.sequence.bottomMarginAdj || 1 %>',
            useMaxWidth: true
        },
        class: {
            useMaxWidth: true
        },
        state: {
            useMaxWidth: true
        },
        gantt: {
            useMaxWidth: true
        },
        journey: {
            useMaxWidth: true
        }
    });
});
</script>

<!-- Mermaid 样式 -->
<style>
.mermaid {
    text-align: center;
    margin: 1.5em 0;
    padding: 1rem;
    background: #f8f9fa;
    border-radius: 0.5rem;
    border: 1px solid #e9ecef;
    overflow-x: auto;
    overflow-y: visible;
    max-width: 100%;
    box-sizing: border-box;
}

.mermaid-rendered {
    background: transparent;
    border: none;
    padding: 0;
}

.mermaid-error {
    color: #dc3545;
    background-color: #f8d7da;
    border: 1px solid #f5c6cb;
    border-radius: 0.375rem;
    padding: 0.75rem;
    margin: 1rem 0;
    font-family: monospace;
    text-align: left;
}

/* 深色模式下的 Mermaid 样式 */
.dark .mermaid {
    background: #374151;
    border-color: #4b5563;
}

.dark .mermaid-error {
    color: #f8d7da;
    background-color: #2d1b1e;
    border-color: #842029;
}

/* 确保 Mermaid 图表在深색模式下可见 */
.dark .mermaid svg {
    background-color: transparent;
}

/* Mermaid 图表样式优化 */
.mermaid svg {
    max-width: 100%;
    height: auto;
    display: block;
    margin: 0 auto;
    /* 保持原始比例，但不超过容器 */
    width: auto;
}

/* Mermaid 图表容器已在上面定义，这里添加额外的响应式处理 */

/* 针对大型图表的滚动条样式 */
.mermaid::-webkit-scrollbar {
    height: 8px;
}

.mermaid::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 4px;
}

.mermaid::-webkit-scrollbar-thumb {
    background: #c1c1c1;
    border-radius: 4px;
}

.mermaid::-webkit-scrollbar-thumb:hover {
    background: #a8a8a8;
}

/* 深色模式下的滚动条 */
.dark .mermaid::-webkit-scrollbar-track {
    background: #4b5563;
}

.dark .mermaid::-webkit-scrollbar-thumb {
    background: #6b7280;
}

.dark .mermaid::-webkit-scrollbar-thumb:hover {
    background: #9ca3af;
}
</style>
<% } %>

<!-- 悬浮目录功能 -->
<% if (is_post()) { %>
<script>
document.addEventListener('DOMContentLoaded', function() {
    const floatingToc = document.getElementById('floating-toc');
    const tocPanel = document.getElementById('toc-panel');
    const tocNav = document.getElementById('toc-nav');
    const postContent = document.getElementById('post-content');
    
    if (!floatingToc || !tocPanel || !tocNav || !postContent) return;
    
    // 生成目录
    function generateTOC() {
        const headings = postContent.querySelectorAll('h1, h2, h3, h4, h5, h6');
        if (headings.length === 0) return false;
        
        let tocHTML = '<ul class="toc-list">';
        let currentLevel = 0;
        let tocIndex = 0;
        
        headings.forEach((heading, index) => {
            const level = parseInt(heading.tagName.charAt(1));
            const text = heading.textContent || heading.innerText;
            const id = heading.id || `toc-${index}`;
            
            // 为标题添加ID（如果没有的话）
            if (!heading.id) {
                heading.id = id;
            }
            
            // 处理层级
            if (level > currentLevel) {
                for (let i = currentLevel; i < level; i++) {
                    if (i > 0) tocHTML += '<ul class="toc-list">';
                }
            } else if (level < currentLevel) {
                for (let i = currentLevel; i > level; i--) {
                    tocHTML += '</ul>';
                }
            }
            
            tocHTML += `
                <li class="toc-item toc-level-${level}">
                    <a href="#${id}" class="toc-link" data-target="${id}">
                        <span class="toc-number">${++tocIndex}</span>
                        <span class="toc-text">${text}</span>
                    </a>
                </li>
            `;
            
            currentLevel = level;
        });
        
        // 关闭剩余的ul标签
        for (let i = currentLevel; i > 1; i--) {
            tocHTML += '</ul>';
        }
        tocHTML += '</ul>';
        
        tocNav.innerHTML = tocHTML;
        return true;
    }
    

    
    // 精确定位目录在左侧空白区域
    function positionTocInLeftMargin() {
        const mainContent = document.querySelector('.main-content');
        const postContent = document.querySelector('#post-content');
        
        if (!mainContent || !postContent) return;
        
        const mainContentRect = mainContent.getBoundingClientRect();
        const viewportWidth = window.innerWidth;
        
        // 计算左侧空白区域
        const leftSpace = mainContentRect.left;
        const availableWidth = leftSpace - 64; // 留出32px的间距
        
        // 只在有足够空间时显示目录（需要至少280px宽度）
        if (availableWidth >= 280 && viewportWidth >= 1400) {
            // 将目录定位在左侧空白区域的中央
            const tocWidth = 280;
            const left = Math.max(32, (leftSpace - tocWidth) / 2);
            const postContentRect = postContent.getBoundingClientRect();
            const top = postContentRect.top + window.pageYOffset - 20; // 与文章内容顶部对齐
            
            tocPanel.style.left = left + 'px';
            tocPanel.style.top = top + 'px';
            tocPanel.style.position = 'absolute';
            tocPanel.style.width = tocWidth + 'px';
            tocPanel.style.display = 'block';
            
            return true;
        } else {
            // 屏幕太小时隐藏目录
            tocPanel.style.display = 'none';
            return false;
        }
    }
    
    // 初始化目录
    if (generateTOC()) {
        floatingToc.classList.remove('hidden');
        
        // 定位目录
        if (positionTocInLeftMargin()) {
            // 窗口大小改变时重新定位
            window.addEventListener('resize', positionTocInLeftMargin);
            
            // 滚动时保持固定位置
            let isFixed = false;
            let originalLeft = parseInt(tocPanel.style.left);
            
            window.addEventListener('scroll', function() {
                const scrollTop = window.pageYOffset;
                const postContent = document.querySelector('#post-content');
                
                if (!postContent) return;
                
                const postContentRect = postContent.getBoundingClientRect();
                const shouldFix = scrollTop > 150; // 滚动超过150px时固定
                
                if (shouldFix && !isFixed) {
                    tocPanel.style.position = 'fixed';
                    tocPanel.style.top = '100px'; // 距离顶部100px
                    tocPanel.style.left = originalLeft + 'px'; // 保持原来的水平位置
                    isFixed = true;
                } else if (!shouldFix && isFixed) {
                    positionTocInLeftMargin();
                    originalLeft = parseInt(tocPanel.style.left);
                    isFixed = false;
                }
            });
        }
        
        // 目录点击事件
        tocNav.addEventListener('click', function(e) {
            e.preventDefault();
            const link = e.target.closest('.toc-link');
            if (!link) return;
            
            const targetId = link.getAttribute('data-target');
            const targetElement = document.getElementById(targetId);
            
            if (targetElement) {
                // 平滑滚动到目标位置
                const headerOffset = 80; // 考虑固定头部的高度
                const elementPosition = targetElement.getBoundingClientRect().top;
                const offsetPosition = elementPosition + window.pageYOffset - headerOffset;
                
                window.scrollTo({
                    top: offsetPosition,
                    behavior: 'smooth'
                });
                
                // 更新活跃状态
                updateActiveTOCItem(targetId);
            }
        });
        
        // 滚动时高亮当前章节
        let ticking = false;
        function updateActiveTOCItem(activeId) {
            // 移除所有活跃状态
            tocNav.querySelectorAll('.toc-link').forEach(link => {
                link.classList.remove('active');
            });
            
            // 添加当前活跃状态
            if (activeId) {
                const activeLink = tocNav.querySelector(`[data-target="${activeId}"]`);
                if (activeLink) {
                    activeLink.classList.add('active');
                }
            }
        }
        
        function onScroll() {
            if (!ticking) {
                requestAnimationFrame(function() {
                    const headings = postContent.querySelectorAll('h1, h2, h3, h4, h5, h6');
                    let activeHeading = null;
                    
                    // 找到当前可见的标题
                    for (let i = headings.length - 1; i >= 0; i--) {
                        const heading = headings[i];
                        const rect = heading.getBoundingClientRect();
                        if (rect.top <= 100) { // 100px的容差
                            activeHeading = heading.id;
                            break;
                        }
                    }
                    
                    if (activeHeading) {
                        updateActiveTOCItem(activeHeading);
                    }
                    
                    ticking = false;
                });
            }
            ticking = true;
        }
        
        window.addEventListener('scroll', onScroll);
        
        // 初始化时设置活跃状态
        setTimeout(onScroll, 100);
    }
});
</script>

<!-- 左侧目录样式 -->
<style>
/* 目录侧边栏样式 */
#toc-sidebar {
    /* 基础样式已在HTML中定义 */
}

/* 目录列表样式 */
.toc-list {
    list-style: none;
    padding: 0;
    margin: 0;
}

.toc-list .toc-list {
    margin-left: 1rem;
    margin-top: 0.25rem;
}

.toc-item {
    margin: 0.2rem 0;
}

.toc-link {
    display: flex;
    align-items: center;
    padding: 0.4rem 0.6rem;
    text-decoration: none;
    color: #6b7280;
    border-radius: 0.375rem;
    transition: all 0.2s ease;
    font-size: 0.825rem;
    line-height: 1.2rem;
}

.toc-link:hover {
    background-color: rgba(59, 130, 246, 0.1);
    color: #2563eb;
    transform: translateX(3px);
}

.toc-link.active {
    background-color: rgba(59, 130, 246, 0.15);
    color: #2563eb;
    font-weight: 600;
    border-left: 3px solid #2563eb;
    padding-left: 0.5rem;
}

.toc-number {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 1.3rem;
    height: 1.3rem;
    background-color: #e5e7eb;
    color: #374151;
    border-radius: 50%;
    font-size: 0.7rem;
    font-weight: 600;
    margin-right: 0.4rem;
    flex-shrink: 0;
    transition: all 0.2s ease;
}

.toc-link:hover .toc-number,
.toc-link.active .toc-number {
    background-color: #2563eb;
    color: white;
    transform: scale(1.1);
}

.toc-text {
    flex: 1;
    line-height: 1.3;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

/* 不同层级的样式 */
.toc-level-1 .toc-link {
    font-weight: 600;
    font-size: 0.875rem;
}

.toc-level-2 .toc-link {
    font-size: 0.8rem;
}

.toc-level-3 .toc-link,
.toc-level-4 .toc-link,
.toc-level-5 .toc-link,
.toc-level-6 .toc-link {
    font-size: 0.75rem;
}

/* 深色模式 */
.dark .toc-link {
    color: #9ca3af;
}

.dark .toc-link:hover {
    background-color: rgba(59, 130, 246, 0.2);
    color: #60a5fa;
}

.dark .toc-link.active {
    background-color: rgba(59, 130, 246, 0.25);
    color: #60a5fa;
    border-left-color: #60a5fa;
}

.dark .toc-number {
    background-color: #4b5563;
    color: #d1d5db;
}

.dark .toc-link:hover .toc-number,
.dark .toc-link.active .toc-number {
    background-color: #3b82f6;
    color: white;
}

/* 响应式设计 */
@media (max-width: 1023px) {
    /* 小屏幕：隐藏目录 */
    #toc-sidebar {
        display: none !important;
    }
}

/* 滚动条样式 */
#toc-sidebar .overflow-y-auto::-webkit-scrollbar {
    width: 4px;
}

#toc-sidebar .overflow-y-auto::-webkit-scrollbar-track {
    background: transparent;
}

#toc-sidebar .overflow-y-auto::-webkit-scrollbar-thumb {
    background: rgba(156, 163, 175, 0.5);
    border-radius: 2px;
}

.dark #toc-sidebar .overflow-y-auto::-webkit-scrollbar-thumb {
    background: rgba(75, 85, 99, 0.5);
}


</style>
<% } %>
</script>

<!-- 现代代码块系统 -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    // 初始化所有代码块 - 处理Hexo的figure.highlight结构
    document.querySelectorAll('figure.highlight').forEach(function(figure, index) {
        // 获取语言信息
        const language = getLanguageFromClass(figure.className) || 'text';
        
        // 如果是 mermaid，特殊处理
        if (language === 'mermaid') {
            // 处理 Mermaid 代码块
            const codeLineElements = figure.querySelectorAll('td.code .line');
            const lines = Array.from(codeLineElements).map(line => line.textContent);
            const mermaidCode = lines.join('\n');
            
            // 创建 Mermaid 容器
            const mermaidContainer = document.createElement('div');
            mermaidContainer.className = 'mermaid';
            mermaidContainer.textContent = mermaidCode;
            
            // 替换原来的代码块
            figure.parentNode.replaceChild(mermaidContainer, figure);
            return; // 跳过普通代码块处理
        }
        
        // 创建代码块容器
        const codeContainer = document.createElement('div');
        codeContainer.className = 'modern-code-block';
        
        // 创建头部
        const header = document.createElement('div');
        header.className = 'code-header';
        header.innerHTML = `
            <div class="code-language">${getLanguageDisplay(language)}</div>
            <button class="code-copy-btn" data-index="${index}">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                    <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"></path>
                </svg>
                <span>复制</span>
            </button>
        `;
        
        // 创建代码内容区域
        const codeContent = document.createElement('div');
        codeContent.className = 'code-content';
        
        // 处理代码内容 - 从Hexo的table结构中提取
        const codeLineElements = figure.querySelectorAll('td.code .line');
        const lines = Array.from(codeLineElements).map(line => line.textContent);
        const codeText = lines.join('\n');
        
        // 创建行号和代码行
        const lineNumbers = document.createElement('div');
        lineNumbers.className = 'line-numbers';
        
        const codeLinesContainer = document.createElement('div');
        codeLinesContainer.className = 'code-lines';
        
        lines.forEach((line, lineIndex) => {
            if (lineIndex === lines.length - 1 && line === '') return; // 跳过最后的空行
            
            // 行号
            const lineNumber = document.createElement('div');
            lineNumber.className = 'line-number';
            lineNumber.textContent = lineIndex + 1;
            lineNumbers.appendChild(lineNumber);
            
            // 代码行
            const codeLine = document.createElement('div');
            codeLine.className = 'code-line';
            codeLine.textContent = line || ' '; // 空行显示空格
            codeLinesContainer.appendChild(codeLine);
        });
        
        codeContent.appendChild(lineNumbers);
        codeContent.appendChild(codeLinesContainer);
        
        // 组装代码块
        codeContainer.appendChild(header);
        codeContainer.appendChild(codeContent);
        
        // 替换原始代码块
        figure.parentNode.replaceChild(codeContainer, figure);
        
        // 添加复制功能
        const copyBtn = codeContainer.querySelector('.code-copy-btn');
        copyBtn.addEventListener('click', function() {
            const textToCopy = codeText;
            
            if (navigator.clipboard) {
                navigator.clipboard.writeText(textToCopy).then(function() {
                    showCopySuccess(copyBtn);
                });
            } else {
                // 降级方案
                const textArea = document.createElement('textarea');
                textArea.value = textToCopy;
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);
                showCopySuccess(copyBtn);
            }
        });
    });
    
    function getLanguageFromClass(className) {
        if (!className) return null;
        // Hexo使用 highlight 后跟语言名称的格式
        const match = className.match(/highlight\s+(\w+)/);
        return match ? match[1] : null;
    }
    
    function getLanguageDisplay(lang) {
        const langMap = {
            'javascript': 'JavaScript',
            'js': 'JavaScript',
            'typescript': 'TypeScript',
            'ts': 'TypeScript',
            'python': 'Python',
            'py': 'Python',
            'java': 'Java',
            'cpp': 'C++',
            'c': 'C',
            'csharp': 'C#',
            'cs': 'C#',
            'html': 'HTML',
            'css': 'CSS',
            'scss': 'SCSS',
            'sass': 'Sass',
            'json': 'JSON',
            'xml': 'XML',
            'yaml': 'YAML',
            'yml': 'YAML',
            'sql': 'SQL',
            'bash': 'Bash',
            'shell': 'Shell',
            'sh': 'Shell',
            'powershell': 'PowerShell',
            'ps1': 'PowerShell',
            'go': 'Go',
            'rust': 'Rust',
            'php': 'PHP',
            'ruby': 'Ruby',
            'swift': 'Swift',
            'kotlin': 'Kotlin',
            'dart': 'Dart',
            'text': 'Text',
            'txt': 'Text'
        };
        return langMap[lang.toLowerCase()] || lang.toUpperCase();
    }
    
    function showCopySuccess(button) {
        const span = button.querySelector('span');
        const originalText = span.textContent;
        span.textContent = '已复制!';
        button.classList.add('copied');
        
        setTimeout(function() {
            span.textContent = originalText;
            button.classList.remove('copied');
        }, 2000);
    }
});
</script>
