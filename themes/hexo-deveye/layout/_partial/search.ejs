<section class="section padd-box">
  <div class="row">
    <div class="col-sm-12">
      <h2 class="title-lg text-upper">搜索</h2>
      <div class="text-box">
          <div class="search-form" style="margin-bottom: 30px;">
            <label>
              <span class="screen-reader-text">Search for:</span>
              <input type="search" id="search-input" class="search-field" placeholder="Search" value="" name="s">
            </label>
            <button type="button" id="search-btn" class="search-submit">
              <span class="screen-reader-text">Search</span>
              <span class="crt-icon crt-icon-search"></span>
            </button>
          </div>
          <div id="search-summary"></div>
          <div id="search-results" class="search-results">
            <!-- 搜索结果将显示在这里 -->
          </div>
        </div>
    </div>
</section>

<script src="/js/lunr.min.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const searchInput = document.getElementById('search-input');
  const searchBtn = document.getElementById('search-btn');
  const searchResults = document.getElementById('search-results');
  let dataMap = new Map();
  let idx;

  // Helper function to debounce search input
  function debounce(func, wait) {
    let timeout;
    return function(...args) {
      const context = this;
      clearTimeout(timeout);
      timeout = setTimeout(() => func.apply(context, args), wait);
    };
  }

  // Helper function to escape regex special characters for highlighting
  function escapeRegExp(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
  }

  // 加载搜索数据
  // For a significant performance improvement, consider pre-building the Lunr.js index
  // during your Hexo build process and loading the serialized index here.
  fetch('<%- config.root %>search.json')
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok ' + response.statusText);
      }
      return response.json();
    })
    .then(data => {
      dataMap = new Map(data.map(item => [item.url, item]));
      // 初始化Lunr索引
      idx = lunr(function () {
        this.field('title', { boost: 10 });
        this.field('text');
        this.ref('url');
        
        data.forEach(item => {
            this.add({
                title: item.title,
                text: item.text,
                url: item.url
            });
        });
      });
      searchInput.disabled = false;
      searchBtn.disabled = false;
      searchInput.placeholder = "输入关键词搜索...";
    })
    .catch(error => {
        console.error('Failed to load search data:', error);
        searchResults.innerHTML = '<div class="text-center"><p>抱歉，搜索功能加载失败，请稍后重试。</p></div>';
        searchInput.disabled = true;
        searchBtn.disabled = true;
    });

  function performSearch() {
    const query = searchInput.value.trim();
    if (!query) {
      searchResults.innerHTML = '';
      document.getElementById('search-summary').style.display = 'none';
      return;
    }

    try {
      const results = idx.search(query);
      renderResults(results, query);
    } catch (e) {
      console.error(e);
      searchResults.innerHTML = '<div class="text-center"><p>搜索时遇到错误。</p></div>';
    }
  }

  function renderResults(results, query) {
    const summaryEl = document.getElementById('search-summary');
    const searchResults = document.getElementById('search-results');

    if (results.length === 0) {
      summaryEl.style.display = 'none';
      searchResults.innerHTML = '<div class="text-center"><p>没有找到相关结果</p></div>';
      return;
    }

    summaryEl.innerHTML = `<div style="margin-bottom: 30px;">找到 ${results.length} 个结果</div>`;
    summaryEl.style.display = 'block';

    const queryTerms = query.split(/\s+/).filter(term => term.length > 0);
    let html = '';
    results.forEach(result => {
      const post = dataMap.get(result.ref);
      console.log(post)
      if (post) {
        const postUrl = ('<%- config.root %>' + post.url).replace(/^\/\//, '/');
        let postExcerpt = truncate(post.content, 150);
        const postTitle = post.title || '';

        // Highlight search terms
        queryTerms.forEach(term => {
          const regex = new RegExp(escapeRegExp(term), 'gi');
          postExcerpt = postExcerpt.replace(regex, (match) => `<mark>${match}</mark>`);
        });

        html += `
          <article class="post brd-btm">
              <header class="post-header">
                  <h3 class="post-title">
                      <a href="${postUrl}">${postTitle}</a>
                  </h3>
              </header>
              <div class="post-content">
                  <p>${postExcerpt}</p>
              </div>
          </article>
        `;
      }
    });
    searchResults.innerHTML = html;
  }
  
  function truncate(text, length) {
      if (!text || text.length <= length) {
          return text || '';
      }
      return text.substring(0, length) + '...';
  }

  searchBtn.addEventListener('click', performSearch);
  searchInput.addEventListener('input', debounce(performSearch, 300));

  // 初始时禁用输入框和按钮
  searchInput.disabled = true;
  searchInput.placeholder = "正在加载搜索索引...";
  searchBtn.disabled = true;
});
</script> 